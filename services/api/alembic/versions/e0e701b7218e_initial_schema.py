"""Initial schema

Revision ID: e0e701b7218e
Revises:
Create Date: 2025-08-25 14:39:33.287976

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e0e701b7218e"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "assets",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "assets",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(op.f("idx_assets_shoot_id"), table_name="assets")
    op.drop_index(op.f("idx_assets_user_id"), table_name="assets")
    op.drop_constraint(op.f("assets_user_id_fkey"), "assets", type_="foreignkey")
    op.drop_constraint(op.f("assets_shoot_id_fkey"), "assets", type_="foreignkey")
    op.create_foreign_key(None, "assets", "users", ["user_id"], ["id"])
    op.create_foreign_key(None, "assets", "shoots", ["shoot_id"], ["id"])
    op.alter_column(
        "credits",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "credits",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(op.f("credits_user_id_fkey"), "credits", type_="foreignkey")
    op.create_foreign_key(None, "credits", "users", ["user_id"], ["id"])
    op.alter_column(
        "job_events",
        "details",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.Text(),
        existing_nullable=True,
    )
    op.alter_column(
        "job_events",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(op.f("idx_job_events_job_id"), table_name="job_events")
    op.drop_constraint(op.f("job_events_job_id_fkey"), "job_events", type_="foreignkey")
    op.create_foreign_key(None, "job_events", "jobs", ["job_id"], ["id"])
    op.alter_column(
        "jobs",
        "status",
        existing_type=postgresql.ENUM(
            "queued", "processing", "succeeded", "failed", name="job_status"
        ),
        type_=sa.Enum("queued", "processing", "succeeded", "failed", name="jobstatus"),
        existing_nullable=False,
        existing_server_default=sa.text("'queued'::job_status"),
    )
    op.alter_column(
        "jobs",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "jobs",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "jobs",
        "started_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.alter_column(
        "jobs",
        "completed_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.drop_index(op.f("idx_jobs_created_at"), table_name="jobs")
    op.drop_index(op.f("idx_jobs_status"), table_name="jobs")
    op.drop_index(op.f("idx_jobs_user_id"), table_name="jobs")
    op.drop_constraint(op.f("jobs_user_id_fkey"), "jobs", type_="foreignkey")
    op.drop_constraint(op.f("jobs_asset_id_fkey"), "jobs", type_="foreignkey")
    op.create_foreign_key(None, "jobs", "assets", ["asset_id"], ["id"])
    op.create_foreign_key(None, "jobs", "users", ["user_id"], ["id"])
    op.alter_column(
        "shoots",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "shoots",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(op.f("idx_shoots_user_id"), table_name="shoots")
    op.drop_constraint(op.f("shoots_user_id_fkey"), "shoots", type_="foreignkey")
    op.create_foreign_key(None, "shoots", "users", ["user_id"], ["id"])
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(None, "shoots", type_="foreignkey")
    op.create_foreign_key(
        op.f("shoots_user_id_fkey"),
        "shoots",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_index(op.f("idx_shoots_user_id"), "shoots", ["user_id"], unique=False)
    op.alter_column(
        "shoots",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "shoots",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(None, "jobs", type_="foreignkey")
    op.drop_constraint(None, "jobs", type_="foreignkey")
    op.create_foreign_key(
        op.f("jobs_asset_id_fkey"),
        "jobs",
        "assets",
        ["asset_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("jobs_user_id_fkey"),
        "jobs",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_index(op.f("idx_jobs_user_id"), "jobs", ["user_id"], unique=False)
    op.create_index(op.f("idx_jobs_status"), "jobs", ["status"], unique=False)
    op.create_index(op.f("idx_jobs_created_at"), "jobs", ["created_at"], unique=False)
    op.alter_column(
        "jobs",
        "completed_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "jobs",
        "started_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "jobs",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "jobs",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "jobs",
        "status",
        existing_type=sa.Enum(
            "queued", "processing", "succeeded", "failed", name="jobstatus"
        ),
        type_=postgresql.ENUM(
            "queued", "processing", "succeeded", "failed", name="job_status"
        ),
        existing_nullable=False,
        existing_server_default=sa.text("'queued'::job_status"),
    )
    op.drop_constraint(None, "job_events", type_="foreignkey")
    op.create_foreign_key(
        op.f("job_events_job_id_fkey"),
        "job_events",
        "jobs",
        ["job_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_index(
        op.f("idx_job_events_job_id"), "job_events", ["job_id"], unique=False
    )
    op.alter_column(
        "job_events",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "job_events",
        "details",
        existing_type=sa.Text(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.drop_constraint(None, "credits", type_="foreignkey")
    op.create_foreign_key(
        op.f("credits_user_id_fkey"),
        "credits",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "credits",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "credits",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(None, "assets", type_="foreignkey")
    op.drop_constraint(None, "assets", type_="foreignkey")
    op.create_foreign_key(
        op.f("assets_shoot_id_fkey"),
        "assets",
        "shoots",
        ["shoot_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("assets_user_id_fkey"),
        "assets",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_index(op.f("idx_assets_user_id"), "assets", ["user_id"], unique=False)
    op.create_index(op.f("idx_assets_shoot_id"), "assets", ["shoot_id"], unique=False)
    op.alter_column(
        "assets",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "assets",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    # ### end Alembic commands ###
